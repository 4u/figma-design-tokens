"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.boolean = void 0;
exports.fullFlag = fullFlag;
exports.flag = flag;
const chalk_1 = __importDefault(require("chalk"));
const Result = __importStar(require("./Result"));
const findOption_1 = require("./newparser/findOption");
const type_1 = require("./type");
const types_1 = require("./types");
/**
 * A decoder from `string` to `boolean`
 * works for `true` and `false` only.
 */
exports.boolean = {
    async from(str) {
        if (str === "true")
            return true;
        if (str === "false")
            return false;
        throw new Error(`expected value to be either "true" or "false". got: "${str}"`);
    },
    displayName: "true/false",
    defaultValue: () => false,
};
function fullFlag(config) {
    var _a;
    const decoder = (0, type_1.extendType)(exports.boolean, config.type);
    return {
        description: (_a = config.description) !== null && _a !== void 0 ? _a : config.type.description,
        helpTopics() {
            var _a, _b;
            let usage = `--${config.long}`;
            if (config.short) {
                usage += `, -${config.short}`;
            }
            const defaults = [];
            if (config.env) {
                const env = process.env[config.env] === undefined
                    ? ""
                    : `=${chalk_1.default.italic(process.env[config.env])}`;
                defaults.push(`env: ${config.env}${env}`);
            }
            if (config.defaultValue) {
                try {
                    const defaultValue = config.defaultValue();
                    if (config.defaultValueIsSerializable) {
                        defaults.push(`default: ${chalk_1.default.italic(defaultValue)}`);
                    }
                    else {
                        defaults.push("optional");
                    }
                }
                catch (e) { }
            }
            else if (config.type.defaultValue) {
                try {
                    const defaultValue = config.type.defaultValue();
                    if (config.type.defaultValueIsSerializable) {
                        defaults.push(`default: ${chalk_1.default.italic(defaultValue)}`);
                    }
                    else {
                        defaults.push("optional");
                    }
                }
                catch (e) { }
            }
            else if (config.onMissing || config.type.onMissing) {
                defaults.push("optional");
            }
            return [
                {
                    category: "flags",
                    usage,
                    defaults,
                    description: (_b = (_a = config.description) !== null && _a !== void 0 ? _a : config.type.description) !== null && _b !== void 0 ? _b : "self explanatory",
                },
            ];
        },
        register(opts) {
            opts.forceFlagLongNames.add(config.long);
            if (config.short) {
                opts.forceFlagShortNames.add(config.short);
            }
        },
        async parse({ nodes, visitedNodes, }) {
            var _a, _b;
            const options = (0, findOption_1.findOption)(nodes, {
                longNames: [config.long],
                shortNames: config.short ? [config.short] : [],
            }).filter((x) => !visitedNodes.has(x));
            options.forEach((opt) => visitedNodes.add(opt));
            if (options.length > 1) {
                return Result.err({
                    errors: [
                        {
                            nodes: options,
                            message: `Expected 1 occurence, got ${options.length}`,
                        },
                    ],
                });
            }
            const valueFromEnv = config.env ? process.env[config.env] : undefined;
            const onMissingFn = config.onMissing || config.type.onMissing;
            let rawValue;
            let envPrefix = "";
            if (options.length === 0 && valueFromEnv !== undefined) {
                rawValue = valueFromEnv;
                envPrefix = `env[${chalk_1.default.italic(config.env)}]: `;
            }
            else if (options.length === 0 && config.defaultValue) {
                try {
                    const defaultValue = config.defaultValue();
                    return Result.ok(defaultValue);
                }
                catch (e) {
                    const message = `Default value not found for '--${config.long}': ${e.message}`;
                    return Result.err({
                        errors: [{ message, nodes: [] }],
                    });
                }
            }
            else if (options.length === 0 && onMissingFn) {
                try {
                    const missingValue = await onMissingFn();
                    return Result.ok(missingValue);
                }
                catch (e) {
                    const message = `Failed to get missing value for '--${config.long}': ${e.message}`;
                    return Result.err({
                        errors: [{ message, nodes: [] }],
                    });
                }
            }
            else if (options.length === 0 && config.type.defaultValue) {
                try {
                    const defaultValue = config.type.defaultValue();
                    return Result.ok(defaultValue);
                }
                catch (e) {
                    const message = `Default value not found for '--${config.long}': ${e.message}`;
                    return Result.err({
                        errors: [{ message, nodes: [] }],
                    });
                }
            }
            else if (options.length === 1) {
                rawValue = (_b = (_a = options[0].value) === null || _a === void 0 ? void 0 : _a.node.raw) !== null && _b !== void 0 ? _b : "true";
            }
            else {
                return Result.err({
                    errors: [
                        { nodes: [], message: `No value provided for --${config.long}` },
                    ],
                });
            }
            const decoded = await Result.safeAsync(decoder.from(rawValue));
            if (Result.isErr(decoded)) {
                return Result.err({
                    errors: [
                        {
                            nodes: options,
                            message: envPrefix + decoded.error.message,
                        },
                    ],
                });
            }
            return decoded;
        },
    };
}
function flag(config) {
    return fullFlag({
        type: types_1.boolean,
        ...config,
    });
}
//# sourceMappingURL=flag.js.map