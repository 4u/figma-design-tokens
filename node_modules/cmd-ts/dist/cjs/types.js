"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.boolean = exports.string = exports.number = void 0;
exports.optional = optional;
exports.array = array;
const type_1 = require("./type");
/**
 * A number type to be used with `option`
 *
 * Throws an error when the provided string is not a number
 */
exports.number = {
    async from(str) {
        const decoded = Number.parseFloat(str);
        if (Number.isNaN(decoded)) {
            throw new Error("Not a number");
        }
        return decoded;
    },
    displayName: "number",
    description: "a number",
};
/**
 * A string type to be used with `option`.
 */
exports.string = {
    ...(0, type_1.identity)(),
    description: "a string",
    displayName: "str",
};
/**
 * A boolean type to be used with `flag`.
 */
exports.boolean = {
    ...(0, type_1.identity)(),
    description: "a boolean",
    displayName: "true/false",
    defaultValue() {
        return false;
    },
};
/**
 * Makes any type optional, by defaulting to `undefined`.
 */
function optional(t) {
    return {
        ...t,
        defaultValue() {
            return undefined;
        },
    };
}
/**
 * Transforms any type into an array, useful for `multioption` and `multiflag`.
 */
function array(t) {
    return {
        ...t,
        async from(inputs) {
            return Promise.all(inputs.map((input) => t.from(input)));
        },
    };
}
//# sourceMappingURL=types.js.map