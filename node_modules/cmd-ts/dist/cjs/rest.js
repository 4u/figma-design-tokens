"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.rest = rest;
const Result = __importStar(require("./Result"));
function rest(config) {
    return {
        helpTopics() {
            var _a, _b;
            const displayName = (_a = config === null || config === void 0 ? void 0 : config.displayName) !== null && _a !== void 0 ? _a : "arg";
            return [
                {
                    usage: `[...${displayName}]`,
                    category: "arguments",
                    defaults: [],
                    description: (_b = config === null || config === void 0 ? void 0 : config.description) !== null && _b !== void 0 ? _b : "catches the rest of the values",
                },
            ];
        },
        register() { },
        async parse(context) {
            const visitedNodeIndices = [...context.visitedNodes]
                .map((x) => context.nodes.indexOf(x))
                .filter((x) => x > -1);
            const strings = [];
            const maxIndex = Math.max(-1, ...visitedNodeIndices);
            const restItems = context.nodes.slice(maxIndex + 1);
            for (const node of restItems) {
                switch (node.type) {
                    case "positionalArgument": {
                        strings.push(node.raw);
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "longOption": {
                        strings.push(...getOriginal(node));
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "shortOption": {
                        strings.push(...getOriginal(node));
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "forcePositional": {
                        strings.push(node.raw);
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "shortOptions": {
                        const last = node.options.at(-1);
                        context.visitedNodes.add(node);
                        strings.push(...getOriginal({ ...node, value: last === null || last === void 0 ? void 0 : last.value }));
                        break;
                    }
                }
            }
            return Result.ok(strings);
        },
    };
}
function getOriginal(node) {
    if (!node.value) {
        return [node.raw];
    }
    if (node.value.delimiter.raw === " ") {
        return [
            node.raw.slice(0, node.value.index - node.index),
            node.value.node.raw,
        ];
    }
    return [node.raw];
}
//# sourceMappingURL=rest.js.map