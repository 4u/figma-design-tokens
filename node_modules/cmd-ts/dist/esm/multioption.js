import chalk from "chalk";
import * as Result from "./Result";
import { findOption } from "./newparser/findOption";
/**
 * Like `option`, but can accept multiple options, and expects a decoder from a list of strings.
 * An error will highlight all option occurences.
 */
export function multioption(config) {
    return {
        helpTopics() {
            var _a, _b;
            const displayName = (_a = config.type.displayName) !== null && _a !== void 0 ? _a : "value";
            let usage = `--${config.long} <${displayName}>`;
            if (config.short) {
                usage += `, -${config.short}=<${displayName}>`;
            }
            const defaults = [];
            if (config.defaultValue) {
                try {
                    const defaultValue = config.defaultValue();
                    if (config.defaultValueIsSerializable) {
                        defaults.push(`default: ${chalk.italic(defaultValue)}`);
                    }
                    else {
                        defaults.push("[...optional]");
                    }
                }
                catch (e) { }
            }
            else if (config.type.defaultValue) {
                try {
                    const defaultValue = config.type.defaultValue();
                    if (config.type.defaultValueIsSerializable) {
                        defaults.push(`default: ${chalk.italic(defaultValue)}`);
                    }
                    else {
                        defaults.push("[...optional]");
                    }
                }
                catch (e) { }
            }
            else if (config.onMissing || config.type.onMissing) {
                defaults.push("[...optional]");
            }
            return [
                {
                    category: "options",
                    usage,
                    defaults,
                    description: (_b = config.description) !== null && _b !== void 0 ? _b : "self explanatory",
                },
            ];
        },
        register(opts) {
            opts.forceOptionLongNames.add(config.long);
            if (config.short) {
                opts.forceOptionShortNames.add(config.short);
            }
        },
        async parse({ nodes, visitedNodes, }) {
            var _a;
            const options = findOption(nodes, {
                longNames: [config.long],
                shortNames: config.short ? [config.short] : [],
            }).filter((x) => !visitedNodes.has(x));
            const defaultValueFn = config.defaultValue || config.type.defaultValue;
            const onMissingFn = config.onMissing || config.type.onMissing;
            if (options.length === 0 && defaultValueFn) {
                try {
                    const defaultValue = defaultValueFn();
                    return Result.ok(defaultValue);
                }
                catch (e) {
                    const message = `Failed to resolve default value for '--${config.long}': ${e.message}`;
                    return Result.err({
                        errors: [
                            {
                                nodes: [],
                                message,
                            },
                        ],
                    });
                }
            }
            else if (options.length === 0 && onMissingFn) {
                try {
                    const missingValue = await onMissingFn();
                    return Result.ok(missingValue);
                }
                catch (e) {
                    const message = `Failed to get missing value for '--${config.long}': ${e.message}`;
                    return Result.err({
                        errors: [
                            {
                                nodes: [],
                                message,
                            },
                        ],
                    });
                }
            }
            for (const option of options) {
                visitedNodes.add(option);
            }
            const optionValues = [];
            const errors = [];
            const flagNodes = [];
            for (const option of options) {
                const providedValue = (_a = option.value) === null || _a === void 0 ? void 0 : _a.node.raw;
                if (providedValue === undefined) {
                    flagNodes.push(option);
                    continue;
                }
                optionValues.push(providedValue);
            }
            if (flagNodes.length > 0) {
                errors.push({
                    nodes: flagNodes,
                    message: "Expected to get a value, found a flag",
                });
            }
            if (errors.length > 0) {
                return Result.err({ errors });
            }
            const multiDecoded = await Result.safeAsync(config.type.from(optionValues));
            if (Result.isErr(multiDecoded)) {
                return Result.err({
                    errors: [{ nodes: options, message: multiDecoded.error.message }],
                });
            }
            return multiDecoded;
        },
    };
}
//# sourceMappingURL=multioption.js.map