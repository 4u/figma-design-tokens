import * as Result from "./Result";
export function rest(config) {
    return {
        helpTopics() {
            var _a, _b;
            const displayName = (_a = config === null || config === void 0 ? void 0 : config.displayName) !== null && _a !== void 0 ? _a : "arg";
            return [
                {
                    usage: `[...${displayName}]`,
                    category: "arguments",
                    defaults: [],
                    description: (_b = config === null || config === void 0 ? void 0 : config.description) !== null && _b !== void 0 ? _b : "catches the rest of the values",
                },
            ];
        },
        register() { },
        async parse(context) {
            const visitedNodeIndices = [...context.visitedNodes]
                .map((x) => context.nodes.indexOf(x))
                .filter((x) => x > -1);
            const strings = [];
            const maxIndex = Math.max(-1, ...visitedNodeIndices);
            const restItems = context.nodes.slice(maxIndex + 1);
            for (const node of restItems) {
                switch (node.type) {
                    case "positionalArgument": {
                        strings.push(node.raw);
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "longOption": {
                        strings.push(...getOriginal(node));
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "shortOption": {
                        strings.push(...getOriginal(node));
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "forcePositional": {
                        strings.push(node.raw);
                        context.visitedNodes.add(node);
                        break;
                    }
                    case "shortOptions": {
                        const last = node.options.at(-1);
                        context.visitedNodes.add(node);
                        strings.push(...getOriginal({ ...node, value: last === null || last === void 0 ? void 0 : last.value }));
                        break;
                    }
                }
            }
            return Result.ok(strings);
        },
    };
}
function getOriginal(node) {
    if (!node.value) {
        return [node.raw];
    }
    if (node.value.delimiter.raw === " ") {
        return [
            node.raw.slice(0, node.value.index - node.index),
            node.value.node.raw,
        ];
    }
    return [node.raw];
}
//# sourceMappingURL=rest.js.map